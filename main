#!/bin/bash
_scriptRoot="$(dirname $(realpath $0))"
_scriptName="$(basename ${_scriptRoot})"
secondsBetweenPages=15
x=1920
y=1080

pushd ${_scriptRoot}
trap 'exit 1' EXIT HUP INT TERM

for program in chromium xdotool unclutter
do
  which $program >/dev/null 2>&1|| { echo missing $program ; exit;}
done

while [ $# -gt 0 ]
do
  case "$(tr '[:upper:]' '[:lower:]'<<<$1)" in
    -force) 
      echo "Forcing Pi-only commands to run."
      isRaspberryPi=0 # returncode 0 = true
      ;;    
  esac
  shift
done

#  _____                 _   _
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#

function isRaspberryPi {
  [ -n "$isRaspberryPi" ] && return $isRaspberryPi

  if grep -aiqs 'raspberry' /sys/firmware/devicetree/base/model
  then
    isRaspberryPi=0 # true
  else
    isRaspberryPi=1 # false
  fi

}

function isTmpfs {
  [ -z "${1}" ] && echo no arg given && return 1
  [[ "$(df -h --output=fstype "${1}" 2>&1 | tail -n1)" == "tmpfs" ]]
  return $?
}

function closeTabNumber { # Could Alt+1 then Ctrl+Tab [x] times and Ctrl+W the resulting tab.
  tabNumber="$1"
  if [[ $1 =~ ^[0-9]$ ]]
  then
    echo "Closing tab: $1..."
    xdotool search --onlyvisible --class Chromium key --delay 1000 --clearmodifiers Alt+${tabNumber} Ctrl+w
    echo "Done."
  else
    echo "Tab number must be 0-9 for alt+# sequence."
  fi
}

function closeFirstTab { closeTabNumber 1 ;}

function cycleTabsIndefinitely {
  echo "Cycling tabs until chromium exits."
  while [ -d /proc/${chromiumPid} ]
  do
    sleep ${tabbingInterval} # Sleeping first to stay on initial page for 15 as well.
    xdotool search --onlyvisible --class Chromium key --clearmodifiers ctrl+Tab
  done

  echo "Chromium has died [${chromiumPid}]. Exiting."
}

function siteHandler { # Knows how to log into different websites
  case "${URLs[0]}" in
    *"logicmonitor.com"*)
      loginPageTitle="Logicmonitor Hosted Monitoring System - Chromium"
      echo "Waiting for page to finish loading..."
      until [[ "$(xdotool getactivewindow getwindowname)" == "${loginPageTitle}" ]] ; do sleep 1 ; done
      sleep 5 # Let the page finish drawing
      echo "Detected Logicmonitor login page. Logging in."
      xdotool getactivewindow type "${username}"
      xdotool getactivewindow key Tab
      xdotool getactivewindow type "${password}"
      xdotool getactivewindow key Return
      echo "Waiting for next page to finish loading..."
      until [[ "$(xdotool search --onlyvisible --class 'Chromium' getwindowname)" != "${loginPageTitle}" ]] ; do sleep 1 ; done
      sleep 5 # Let the page finish drawing
      ;;
    *)
      echo "Unsure how to handle logins for page: \'${chromiumWindowTitle}\'. Ignoring."
      ;;
  esac
}

if isTmpfs /tmp
then
  echo "Using /tmp tmpfs"
  TMPDIR=/tmp
elif [ -n "${XDG_RUNTIME_DIR}" ] && isTmpfs "${XDG_RUNTIME_DIR}"
then
  echo "Using ${XDG_RUNTIME_DIR} tmpfs"
  TMPDIR=${XDG_RUNTIME_DIR}
else
  echo "MISSING TMPFS MOUNT. USING /tmp BUT MAY IMPACT SD LIFESPAN."
fi

logFile="${TMPDIR}/${_scriptName}.log"
echo "See log file: $logFile for script output"

# Log to file
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>${logFile} 2>&1

#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|


if [ -z "$DISPLAY" ]
then
  echo "\$DISPLAY NOT SET!"
  exit 1
fi

  # Disable display sleeping
xset s noblank
xset s off
xset -dpms

  # Run unclutter to hide the mouse after idle.
pkill -f -9 unclutter
unclutter -idle 0.5 -root &

  connectedDisplays=($(xrandr|grep -E ' connected.*' | cut -d' ' -f1))

  # Start an x11vnc instance for debugging
  isRaspberryPi && pkill -f -9 x11vnc
  isRaspberryPi && x11vnc -bg -reopen -forever -display :0 >/dev/null 2>&1 &

  # Force 1080p
  for display in ${connectedDisplays[@]}
  do
    echo "Configuring ${display}"
    if [ -n "${previousDisplay}" ]
    then
      alignmentArgs="--right-of ${previousDisplay}"
    fi
    isRaspberryPi && echo xrandr --output ${display} --mode ${x}x${y} ${alignmentArgs}
    isRaspberryPi && xrandr --output ${display} --mode ${x}x${y} ${alignmentArgs}


    previousDisplay=${display}
  done


  # Load global configuration
  eval $(jq -r '.credentials | to_entries | .[] | .key + "=" + (.value | @sh)' config.json)
  eval $(jq -r '.settings    | to_entries | .[] | .key + "=" + (.value | @sh)' config.json)
  configuredDisplays=($(jq -rc '.displays | keys | join(" ")' config.json))
  globalPassword="$(base64 -d <<< ${globalPasswordBase64})"

  [ -z "$globalUsername" ]     && echo need username             && exit 1
  [ -z "$globalPassword" ]     && echo need globalPasswordBase64 && exit 1
  [ -z "$configuredDisplays" ] && echo need displays             && exit 1
  [ -z "$tabbingInterval" ]    && echo need tabbingInterval      && exit 1

# Ensure no chromium processes are running
pkill -f -9 chromium

# Emumerate displays
for configuredDisplay in ${configuredDisplays[@]}
do
  if [ -z "${connectedDisplays[${configuredDisplay}]}" ]
  then
    echo "There doesn't seem to be a display conncted for configuredDisplay ${configuredDisplay}"
    continue
  fi

  echo "Preparing: $configuredDisplay"
  #URLs=($(jq -r '.urls[] | @text' config.json))

  # Start an instance of chromium on the appropriate display
  xOffset=$(((${x} * $(((${configuredDisplay}))))))
      URLs=($(jq -r ".displays.\"${configuredDisplay}\".urls| join(\" \")" config.json))
  username="$(jq -r ".displays.\"${configuredDisplay}\".username" config.json)"
  password="$(jq -r ".displays.\"${configuredDisplay}\".password" config.json)"
  [ -z "$username" ] && username="${globalUsername}"
  [ -z "$username" ] || [[ "$username" == null ]] && username="${globalUsername}"
  [ -z "$password" ] || [[ "$password" == null ]] && password="${globalPassword}"
  chromium --disk-cache-dir=${TMPDIR} --user-data-dir=/tmp/${configuredDisplay} --window-position=${xOffset},0 --kiosk --incognito "${URLs[0]}" >/dev/null 2>&1 &
  siteHandler ${URLs[0]}

  if [ ${#URLs[@]} -gt 1 ]
  then
    echo "Opening the remainder of the URLs for this instance."
    chromium --disk-cache-dir=${TMPDIR} --user-data-dir=/tmp/${configuredDisplay} --kiosk --incognito ${URLs[@]:1} >/dev/null 2>&1 &
  else
    echo "No additional URLs to open for this instance."
  fi

  echo "Display ${configuredDisplay} done."
done

closeFirstTab

cycleTabsIndefinitely
