#!/bin/bash
_scriptRoot="$(dirname $(realpath $0))"
_scriptName="$(basename ${_scriptRoot})"
secondsBetweenPages=15

pushd ${_scriptRoot}
trap 'exit 1' EXIT HUP INT TERM

for program in chromium xdotool unclutter
do
  which $program >/dev/null 2>&1|| { echo missing $program ; exit;}
done

#  _____                 _   _
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#

function isRaspberryPi {
  [ -n "$isRaspberryPi" ] && return $isRaspberryPi

  if grep -i 'raspberry' /sys/firmware/devicetree/base/model
  then
    isRaspberryPi=0 # true
  else
    isRaspberryPi=1 # false
  fi
}

function isTmpfs {
  [ -z "${1}" ] && echo no arg given && return 1
  [[ "$(df -h --output=fstype "${1}" 2>&1 | tail -n1)" == "tmpfs" ]]
  return $?
}

function waitChromiumLogActivity {
  timer=0 ; timeout=30
  while [ ! -s ${logFileChromium} ] && [ $timer -lt $timeout ]
  do
    sleep 1
    echo "Waiting for chromium to fire up..."
    ((timer++))
  done

  if [ $timer -eq $timeout ]
  then
    echo "Timed out waiting for chromium log activity."
    return 1
  else
    return 0
  fi
}

function waitChromiumLogSilence {
  echo "Waiting for Chromium log file to stop logging..."
  tail -f ${logFileChromium} | while read -t5 logLine; do : ; done
  echo "Done."
}

function loginHandler {
  chromiumWindowTitle="$(xdotool search --onlyvisible --class 'Chromium' getwindowname)"

  case "${chromiumWindowTitle}" in
    *"Logicmonitor Hosted Monitoring System"*)
      echo "Detected Logicmonitor login page. Logging in."
      xdotool search --onlyvisible --class Chromium type "$username"
      xdotool search --onlyvisible --class Chromium key Tab
      xdotool search --onlyvisible --class Chromium type "$(base64 -d <<< $passwordBase64)"
      xdotool search --onlyvisible --class Chromium key Return
      ;;
    *)
      echo "Unsure how to handle logins for page: \'${chromiumWindowTitle}\'. Ignoring."
      ;;
  esac

  waitChromiumLogSilence
  if [[ "${chromiumWindowTitle}" != "$(xdotool search --onlyvisible --class 'Chromium' getwindowname)" ]]
  then
    echo "We have advanced from the login page..."
  else
    echo "Login may have failed..."
  fi
}

function closeTabNumber { # Could Alt+1 then Ctrl+Tab [x] times and Ctrl+W the resulting tab.
  tabNumber="$1"
    if [[ $1 =~ ^[0-9]$ ]]
    then
      xdotool search --onlyvisible --class Chromium key --delay 1000 --clearmodifiers Alt+${tabNumber} Ctrl+w
    else
      echo "Tab number must be 0-9 for alt+# sequence."
    fi
}

function closeFirstTab { closeTabNumber 1 ;}

function cycleTabsIndefinitely {
  echo "Cycling tabs until chromium exits."
  while [ -d /proc/${chromiumPid} ]
  do
    sleep ${secondsBetweenPages} # Sleeping first to stay on initial page for 15 as well.
    xdotool search --onlyvisible --class Chromium key --clearmodifiers ctrl+Tab
  done

  echo "Chromium has died [${chromiumPid}]. Exiting."
}

if isTmpfs /tmp
then
  echo "Using /tmp tmpfs"
  TMPDIR=/tmp
elif [ -n "${XDG_RUNTIME_DIR}" ] && isTmpfs "${XDG_RUNTIME_DIR}"
then
  echo "Using ${XDG_RUNTIME_DIR} tmpfs"
  TMPDIR=${XDG_RUNTIME_DIR}
else
  echo "MISSING TMPFS MOUNT. USING /tmp BUT MAY IMPACT SD LIFESPAN."
fi

logFileChromium="${TMPDIR}/${_scriptName}.chromium.log"
logFile="${TMPDIR}/${_scriptName}.log"
echo "See log file: $logFile for script output"

exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>${logFile} 2>&1

#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|


if [ -z "$DISPLAY" ]
then
  echo "\$DISPLAY NOT SET!"
  exit 1
fi

  # Disable display sleeping
xset s noblank
xset s off
xset -dpms

  # Run unclutter to hide the mouse after idle.
pkill -f -9 unclutter
unclutter -idle 0.5 -root &

  # Get variables
eval $(jq -r '.credentials | to_entries | .[] | .key + "=" + (.value | @sh)' config.json)
URLs=($(jq -r '.urls[] | @text' config.json))
tabbingInterval=$(jq -r '.settings.tabbingInterval' config.json)

[ -z "$username" ]        && echo need username        && exit 1
[ -z "$passwordBase64" ]  && echo need passwordBase64  && exit 1
[ -z "$URLs" ]            && echo need URLs            && exit 1
[ -z "$tabbingInterval" ] && echo need tabbingInterval && exit 1


  # Start an x11vnc instance for debugging
isRaspberryPi && pkill -f -9 x11vnc
isRaspberryPi && x11vnc -bg -reopen -forever -display :0 >/dev/null 2>&1 &

  # Start chromium
pkill -f -9 chromium
chromium --kiosk --incognito --enable-logging=stderr --v=1 ${URLs[0]} >${logFileChromium} 2>&1 &
chromiumPid=$!

waitChromiumLogActivity # Wait for chromium logs to start writing
waitChromiumLogSilence  # Wait for chromium logs to become silent indicating no activity.
loginHandler # Handle logins
waitChromiumLogSilence # Wait for the logs to calm down again


echo "Opening the remainder of the URLs"
chromium --incognito ${URLs[@]:1}

waitChromiumLogSilence # Wait for the logs to calm down again
closeFirstTab

cycleTabsIndefinitely
