#!/usr/bin/env python
from screeninfo import get_monitors
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from time import sleep
import argparse
import base64
import datetime
import glob
import json
import os
import pyotp
import re
import subprocess
import threading

_scriptRoot = os.path.dirname(os.path.realpath(__file__))
_scriptName = _scriptRoot.split('/')[-1]
_namespace  = _scriptName
_configFile  = "%s/config.json" % _scriptRoot

#  _____                 _   _
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#

class Logger:
    def __init__(self, logFile, dateFormat, dated=True, silent=False):
        self.logFile    = logFile
        self.dateFormat = dateFormat
        self.dated      = dated
        self.silent     = silent

    def log(self, content):

        if self.dated:
            content = "[%s] %s" % (datetime.datetime.now().strftime(self.dateFormat), content)

        if not self.silent:
            print(content)

        with open(self.logFile, 'a') as f:
            f.write(content + '\n')

def runCmd(command, logger, capture_output=True, check=True, background=False, ignoreError=False):
    result = False

    try:
        if background:
            result = subprocess.Popen(command)
        else:
            result = subprocess.run(command, capture_output=capture_output, check=check)

        return(result)

    except Exception as e:
        if not ignoreError:
            logger.log("runCmd failed: %s" % e)

        return(result)

def DisplayLinkDetect(logger):
    for usbDevice in glob.glob('/sys/bus/usb/devices/*'):
        if os.path.isfile(usbDevice + '/manufacturer'):
            with open(usbDevice + '/manufacturer', 'r') as f:
                if f.read().strip() == 'DisplayLink':
                    logger.log('DisplayLink device detected.')
                    return(True)

    return(False)

def prep_DisplayLink(logger):
    if DisplayLinkDetect(logger):
        if os.path.isdir('/sys/module/evdi'):
            logger.log('evdi driver already loaded.')
            displayLinkReady = True
        else:
            if runCmd(['modprobe','evdi'], logger):
                logger.log('evdi loaded.')
    else:
      logger.log('Couldn\'t load driver "evdi" for the attached DisplayLink device')

    # Check the DisplayLink device's provider number and set its output source
    result = runCmd(['xrandr', '--listproviders'], logger)
    for provider in result.stdout.decode('utf-8').split('\n'):
        if 'modesetting' in provider:
            providerIndex = provider.split()[1] # Second number is key
            logger.log("Found modesetting provider: %s [%s]" % (providerIndex, provider))

            cmd = ['xrandr', '--setprovideroutputsource', str(providerIndex), '0']
            logger.log('Running for DisplayLink device: %s' % cmd)
            runCmd(cmd, logger)

def getConnectedDisplays(logger):
    connectedDisplays = []
    result = runCmd(['xrandr'], logger)
    if result:
        for search in re.finditer('.* connected.*', result.stdout.decode('utf-8')):
            connectedDisplays.append(search.group())

    return connectedDisplays
#
def getDisplays(logger):
    active   = []
    inactive = []
    connectedDisplays = getConnectedDisplays(logger)
    for display in connectedDisplays:
        if '+' in display:
          active.append(display)
        else:
          inactive.append(display)

    return active, inactive

def prep_displays(config, logger):
    "Activate all displays at our configured resolution."

    prep_DisplayLink(logger)

    # Get all displays including inactive (For DisplayLinks)
    active, inactive = getDisplays(logger)
    displays = active + inactive

    # Add resX to this while looping over each display to align them left to right incrementally
    previousDisplay = None

    for display in displays:
      displayInterface = display.split()[0]
      resX, resY = config['settings']['resX'], config['settings']['resY']
      cmd = ['xrandr', '--output', displayInterface, '--mode', '%sx%s' % (resX, resY) ]
      if previousDisplay:
        cmd.append('--right-of')
        cmd.append(previousDisplay)

      logger.log('running %s' % cmd)
      runCmd(cmd, logger)
      previousDisplay = displayInterface

def prep_xset(logger):
    if runCmd(['xset', 's', 'noblank'], logger):
        logger.log('xset: screensaver screen blanking disabled.')

    if runCmd(['xset', 's', 'off'], logger):
        logger.log('xset: screensaver disabled.')

    if runCmd(['xset', '-dpms'], logger):
        logger.log('xset: DPMS disabled (Display Power Management Signaling)')

def prep_unclutter(logger):
    unclutter_running_status = runCmd(['pgrep', 'unclutter'], logger, ignoreError=True)

    if unclutter_running_status:
        logger.log('unclutter already running...')
    else:
        logger.log('Starting unclutter...')

        runCmd(['unclutter', '--idle', '0.5', '--fork'], logger, background=True)

def prep(args, config, logger):
    if not args.dry:
        prep_displays(config, logger)
        prep_xset(logger)
        prep_unclutter(logger)
    else:
        logger.log('Running in --dry mode. Skipping prep.')

def wait_page_load(driver, timeout=30):
    WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script("return document.readyState") == "complete"
    )

def is_login_page(driver):
    #keywords = ["login", "sign in", "log in", "sign-in", "logicmonitor hosted monitoring system"]
    keywords = ["login", "sign in", "log in", "sign-in", "two-factor authentication"]

    # Check title
    title = driver.title.lower()
    if any(keyword in title for keyword in keywords):
        return True

    # Check body text
    body = driver.find_element("tag name", "body").text.lower()
    if any(keyword in body for keyword in keywords):
        return True

    # Check form attributes (optional)
    forms = driver.find_elements("tag name", "form")
    for form in forms:
        html = form.get_attribute("outerHTML").lower()
        if any(keyword in html for keyword in keywords):
            return True

    return False


def input_field(driver, field, data, wait):
    field_input = wait.until(EC.presence_of_element_located(field))
    field_input.clear()
    field_input.send_keys(data)

def get_credentials(config, display_id, page_title, logger):
    "Check auth_pages, then the display's own credentials and finally the global credentials for a username and password"

    username = password = None

    # Search the auth_pages configurable for a matching set of credentials for this particular page.
    for regex_title in config['auth_pages']:
        if re.search(regex_title, page_title):
            username = config['auth_pages'][regex_title]['username']
            password = base64.b64decode(config['auth_pages'][regex_title]['passwordBase64']).decode('utf-8')
            break

    if not username:
        if 'username' in config['displays'][display_id]:
            username = config['displays'][display_id]['username']

        else: # Check for a specific set of credentials in auth_pages or try the global definition


            if 'credentials' in config:
                if globalUsername in config['credentials']:
                    username = config['credentials']['username']
                else:
                    logger.log('No usernames set anywhere. Giving up.')
                    return(False)

    if not password:
        if 'password' in config['displays'][display_id]:
            password = base64.b64decode(config['displays'][display_id]['password']).decode('utf-8')

        else:
            if 'credentials' in config:
                if 'globalPasswordBase64' in config['credentials']:
                    password = base64.b64decode(config['credentials']['globalPasswordBase64']).decode('utf-8')
                else:
                    logger.log('No passwords set anywhere. Giving up.')
                    return(False)


    return username, password

def handle_login(args, driver, config, display_id, logger):
    logger.log('Logging into: %s ...' % driver.current_url)

    # Determine credentials
    username, password = get_credentials(config, display_id, driver.title, logger)

    # Fill in some fields and submit
    try:
        wait_page_load(driver)
        wait = WebDriverWait(driver, 10)

        # Fill in the username and password fields
        input_field(driver, (By.NAME,"username"), username, wait)
        input_field(driver, (By.NAME,"password"), password, wait)

        # Click Submit
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        submit_button.click()

        # If we're still on a login page assume we're being challenged for a 2FA token. Should write a proper 2fa check.
        wait_page_load(driver)
        sleep(3) # wait_page_load isn't working too well for dynamic content
        if is_login_page(driver):
            if 'totp' in config['displays'][display_id]:
                totp_code = pyotp.TOTP(config['displays'][display_id]['totp']).now()
                input_field(driver, (By.CSS_SELECTOR, "input[placeholder*='Token']"), totp_code, wait)
                submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                submit_button.click()
                wait_page_load(driver)

                sleep(3) # Another hard coded wait
                if is_login_page(driver):
                    raise Exception("Still on login page after TOTP!")
            else:
                raise Exception("Still on login page after login attempt without expectation of TOTP!")

    except Exception as e:
        logger.log("Something went wrong logging in: %s" % e)
        if args.exit_on_failure:
            exit(2)



def handle_page(args, driver, config, display_id, logger):
    if is_login_page(driver):
        try:
            handle_login(args, driver, config, display_id, logger)
        except Exception as e:
            logger.log('Login failed: %s' % e)
            if args.exit_on_failure:
                exit(2)

def start_session(args, config, monitor, display_id, logger, killSignal):
    urls = config['displays'][display_id]['urls']

    chrome_options = Options()

    # Use a persistently named data dir for this selenium instance.
    chrome_options.add_argument("--user-data-dir=%s/selenium_%s" % (config['settings']['seleniumProfileBasedir'], display_id))

    # Use kiosk mode
    chrome_options.add_argument("--kiosk")

    # Use guest mode to hide the password save pop-up
    chrome_options.add_argument("--guest")

    # Hide automation banner
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    # Place it on the correct display
    chrome_options.add_argument("--window-position=%s,%s" % (monitor.x, monitor.y))

    driver = webdriver.Chrome(options=chrome_options)

    primary_url    = urls[0]
    remaining_urls = urls[1:]

    # Open the primary url (First), handle any authentication.
    driver.get(primary_url)
    wait_page_load(driver)
    handle_page(args, driver, config, display_id, logger)
    sleep(1) # Graceful sleep. Might not be enough on slower hosts

    # Open the rest of the urls as tabs
    for url in remaining_urls:
        driver.execute_script("window.open('%s');" % url)

    # Cycle through tabs until we die
    logger.log('Thread %s cycling all tabs...' % display_id)

    try:
        while True:
                for handle in driver.window_handles:
                    if killSignal.is_set():
                        return(True)

                    driver.switch_to.window(handle)
                    if config['settings']['shouldRefresh']:
                        river.refresh()
                        wait_page_load(driver)

                    handle_page(args, driver, config, display_id, logger)

                    sleep(config['settings']['tabbingInterval'])

    except Exception as e:
        logger.log('Thread error: %s' % e)
        if args.exit_on_failure:
            exit(2)

def monitor_display_count(logger, killSignal):
    initial_monitor_count = len(get_monitors())
    current_monitor_count = initial_monitor_count

    logger.log('Monitoring display count [%s]' % initial_monitor_count)

    while True:
        if killSignal.is_set():
            return(True)

        current_monitor_count = len(get_monitors())
        if current_monitor_count != initial_monitor_count:
            logger.log('Display count has changed. Was %s, now %s' % (initial_monitor_count, current_monitor_count))
            return(False)

        sleep(1)

#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|
#

def main():

    parser = argparse.ArgumentParser(description='A script for automagically displaying websites on a display and cycling through them per display. With auto-login support.')

    parser.add_argument(
            '--debug',
            action='store_true',
            default=False,
            help='Enable debug logging'
            )

    parser.add_argument(
            '--dry',
            action='store_true',
            default=False,
            help='Run in dry mode. No resolution change or background processes, just the browsers'
            )

    parser.add_argument(
            '--exit-on-failure',
            action='store_true',
            default=False,
            help='Exit on failure. For ./runner'
            )


    parser.add_argument(
            '--log-file',
            default="%s/%s.log" % (_scriptRoot, _scriptName),
            help='Specify an alternative log file path.'
            )

    parser.add_argument(
            '--date-format',
            default='%Y-%m-%d %H:%M:%S',
            help='Specify a custom datetime format string.'
            )

    parser.add_argument(
            '--silent',
            action='store_true',
            default=False,
            help='When set write nothing to output, only log to file.'
            )


    args = parser.parse_args()

    # Skip dating if we're not setting a dateformat
    logger = Logger(logFile=args.log_file,
                    dateFormat=args.date_format,
                    dated=bool(args.date_format),
                    silent=args.silent)

    logger.log('[Starting...]')

    try:
       with open(_configFile, 'r') as file:
           config = json.loads(file.read())
    except FileNotFoundError:
        logger.log('Please copy %s.sample to %s to get started.' % (_configFile, _configFile))
        if args.exit_on_failure:
            exit(2)

    killSignal = threading.Event()

    # Prepare to run by weaking display settings and preparing our displays
    prep(args, config, logger)

    # Track our threads
    threads = []

    # Get a monitor count
    monitors = get_monitors()

    # Create the specified seleniumProfileBasedir for the selenium instances to store profiles under
    if not os.path.isdir(config['settings']['seleniumProfileBasedir']):
        os.makedirs(config['settings']['seleniumProfileBasedir'], exist_ok=True)

    # Iterate over monitors and those configured
    for displayIndex in range(0, len(monitors)):
        monitor = monitors[displayIndex]

        thread = threading.Thread(target=start_session, args=(args, config, monitor, displayIndex, logger, killSignal))

        try:
            thread.start()
        except (KeyboardInterrupt, SystemExit):
            cleanup_stop_thread()
            sys.exit()

        threads.append(thread)

    # Start a display count monitoring thread so we can exit if the display count changes.
    thread = threading.Thread(target=monitor_display_count, args=(logger, killSignal,))
    thread.start()
    threads.append(thread)

    # Wait for them to finish
    logger.log('Watching threads')

    while True:
        sleep(5)

        for thread in threads:
            if not thread.is_alive():
                logger.log('A thread has died.')
                if args.exit_on_failure:
                    logger.log('Attempting to exit...')
                    killSignal.set()
                    exit(2)



if __name__ == "__main__":
    main()

