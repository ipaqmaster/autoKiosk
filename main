#!/bin/bash
_scriptPath=$(realpath $0)
_scriptRoot="$(dirname $(realpath $0))"
_scriptName="$(basename ${_scriptRoot})"
_scriptPid=$$

x=1920
y=1080

#  _____                 _   _
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function log {
  logLine="$(date +'%d-%m-%y %H:%M:%S%P') ${1}"
  if [ "$2" == 'stderr' ]
  then
    echo -e "$1" >&2
  else
    echo -e "$1"
  fi

  # Determine log location
  if [ -z "${logFile}" ]
  then
    if [ -z "${TMPDIR}" ]
    then
      logFile=${_scriptPath}.log
    else
      logFile=${TMPDIR}/${_scriptName}.log
    fi

    echo "Using logFile path: ${logFile}"
  fi

  # Always log
  echo -e "$1" >> ${logFile}
}

function isDry { 
  [ -n "$isDry" ]
  return $?
}

function isPiHardware {
  [ -n "$isPiHardware" ] && return $isPiHardware

  if grep -aiqs 'raspberry' /sys/firmware/devicetree/base/model
  then
    isPiHardware=0 # true
  else
    isPiHardware=1 # false
  fi
}

function isTmpfs {
  [ -z "${1}" ] && log "no arg given" && return 1
  [[ "$(df -h --output=fstype "${1}" 2>&1 | tail -n1)" == "tmpfs" ]]
  return $?
}

function closeTabNumber { # Could Alt+1 then Ctrl+Tab [x] times and Ctrl+W the resulting tab.
  tabNumber="$1"
  if [[ $1 =~ ^[0-9]$ ]]
  then
    log "Closing tab: $1..."
    xdotool getactivewindow key --clearmodifiers --delay 1000 Alt+${tabNumber} Ctrl+w
    log "Done."
  else
    log "Tab number must be 0-9 for alt+# sequence."
  fi
}

function closeFirstTab { closeTabNumber 1 ;}

function watchForDisplayCountChange { # Returns on display count change.
	while checkConnectedDisplaysActiveCountDifference
	do
	  sleep 1
	done
}

function endGraphicalSessionOnDisplayCountChange {
  log "Trigger active: Will attempt to restart DM on display count change."
    watchForDisplayCountChange
    log "Active = $(getConnectedDisplaysActiveCount), initial = ${#connectedDisplaysActive[@]}"
    log "The display count has changed."
    endGraphicalSession
}

function endGraphicalSession {
  isDry || { log "Not ending graphical session. Not Pi." ; return ;}

  log "Ending graphical session."
  sudo systemctl restart display-manager # Simplified. Sudo access required.
  exit 1
#  case $XDG_SESSION_DESKTOP in
#    xfce)
#      xfce4-session-logout
#      exit 1
#      ;;
#    gnome)
#      gnome-session-quit
#      exit 1
#      ;;
#    *)
#      log "Unsure how to exit $XDG_SESSION_DESKTOP"
#      ;;
#  esac
}

function cycleTabsIndefinitely {
  log "Cycling tabs until there are no chromium processes or our display count changes..."

  while pgrep chromium >/dev/null 2>&1
  do

      # Only enumerate active displays
    for activeDisplayIndex in ${!connectedDisplaysActive[@]}
    do
      targetPid=${connectedDisplaysActiveChromiumPids[${activeDisplayIndex}]}

      if [ -z "$targetPid" ]
      then
        log "Failed to get pid for activeDisplayIndex ${activeDisplayIndex}"
      fi

      if [ -d /proc/${targetPid} ]
      then
        # Ignore displays which don't have more than a single URL
        if [ $(jq -r ".displays.\"${activeDisplayIndex}\".urls | length" config.json) -gt 1 ] 
        then
          windowId=$(xdotool search --pid ${targetPid} --onlyvisible | tail -n1)
          xdotool windowactivate ${windowId}
          xdotool key --clearmodifiers --window ${windowId} ctrl+Tab
        fi
      else
        log "Chromium for monitor ${activeDisplayIndex} has died [${targetPid}]."
        log "Ending session to attempt recovery."
        endGraphicalSession
      fi
    done

    sleep ${tabbingInterval} # Sleeping first to stay on initial page for same delay too.
  done

  # Relog if our chromium processes have gone missing
  if pgrep chromium >/dev/null 2>&1
  then
    log "It seems the chromium processes have disappeared."
    log "Ending session to attempt recovery."
    endGraphicalSession
  fi
}

function siteHandler { # Knows how to log into different websites
  case "${URLs[0]}" in
    *"logicmonitor.com"*)
      loginPageTitle="Logicmonitor Hosted Monitoring System - Chromium"
      log "Waiting for page to finish loading..."
      until [[ "$(xdotool getactivewindow getwindowname)" == "${loginPageTitle}" ]] ; do sleep 0.5 ; done
      isPiHardware && sleep 5 || sleep 1 # If Pi let the page finish drawing.
      log "Detected Logicmonitor login page. Logging in."
      xdotool getactivewindow type --clearmodifiers "${username}"
      xdotool getactivewindow key  --clearmodifiers Tab
      xdotool getactivewindow type --clearmodifiers "${password}"
      xdotool getactivewindow key  --clearmodifiers Return
      log "Waiting for next page to finish loading..."
      until [[ "$(xdotool getactivewindow getwindowname)" != "${loginPageTitle}" ]] ; do sleep 1 ; done
      isPiHardware && sleep 5 || sleep 1 # If Pi let the page finish drawing.
      ;;
    *)
      log "Unsure how to handle logins for page: \'${chromiumWindowTitle}\'. Ignoring."
      ;;
  esac
}

function getConnectedDisplays       { xrandr|grep -E ' connected.*'   | cut -d' ' -f1 ;}
function getConnectedDisplaysCount  { wc -w <<< "$(getConnectedDisplays)" ;}
function checkConnectedDisplaysCountDifference { [ $(getConnectedDisplaysCount) -eq ${#connectedDisplaysActive[@]} ] ;}

function getConnectedDisplaysActive { xrandr|grep -E ' connected.*\+' | cut -d' ' -f1 ;}
function getConnectedDisplaysActiveCount { wc -w <<< "$(getConnectedDisplaysActive)" ;}
function checkConnectedDisplaysActiveCountDifference { [ $(getConnectedDisplaysActiveCount) -eq ${#connectedDisplaysActive[@]} ] ;}

#  ____
# |  _ \ _ __ ___ _ __
# | |_) | '__/ _ \ '_ \
# |  __/| | |  __/ |_) |
# |_|   |_|  \___| .__/
#                |_|

if [ -z "$DISPLAY" ]
then
  log "\$DISPLAY NOT SET!"
  exit 1
fi

# Kill other instances.
pgrep -f "$_scriptName" | \
  grep -v $_scriptPid | \
  while read otherPid
  do
    log "Killing other instance: $otherPid"
    kill $otherPid
  done

# Enumerate args
while [ $# -gt 0 ]
do
  case "$(tr '[:upper:]' '[:lower:]'<<<$1)" in
    -dry) 
      log "Dry mode active. Some features of the script will not activate."
      log "This mode is intended for testing."
      isDry=1
      ;;    
  esac
  shift
done

isDry
isPiHardware

if isTmpfs /tmp
then
  log "Using /tmp tmpfs"
  TMPDIR=/tmp
elif [ -n "${XDG_RUNTIME_DIR}" ] && isTmpfs "${XDG_RUNTIME_DIR}"
then
  log "Using ${XDG_RUNTIME_DIR} tmpfs"
  TMPDIR=${XDG_RUNTIME_DIR}
else
  log "MISSING TMPFS MOUNT. USING /tmp BUT MAY IMPACT SD LIFESPAN."
fi

# Annotate the log with a starting timestamp
log "[$(date)]"

pushd ${_scriptRoot}
trap 'exit 1' EXIT HUP INT TERM


# Check for important software
for program in chromium xdotool unclutter
do
  which $program >/dev/null 2>&1|| { missingPrograms+=($program) ;}
done

if [ -n "${missingPrograms}" ]
then
  log "Missing: ${missingPrograms[@]}"
  exit 1
fi

# DisplayLink support
for usbDevice in /sys/bus/usb/devices/*
do
  if [ -f ${usbDevice}/manufacturer ]
  then
    if [[ "$(cat ${usbDevice}/manufacturer)" == DisplayLink ]]
    then
      displayLinkPresent=1
      break
    fi
  fi
done

if [ -n "${displayLinkPresent}" ]
then

  if [ -d /sys/module/evdi ]
  then
    displayLinkReady=ready
  else
    modprobe evdi
    modprobeStatus=$?
    if [ ${modprobeStatus} -eq 0 ]
    then
      displayLinkReady=ready
    else
      log "DisplayLink devices are attached buy the evdi driver was unable to load. Skipping DisplayLink devices for this run."
    fi
  fi

  if [ -n "${displayLinkPresent}" ] && [ -n "$displayLinkReady" ]
  then
    log "At least one DisplayLink USB display has been detected. Running the required Xrandr commands to activate DisplayLink displays."
    xrandr --listproviders | grep "modesetting" | grep -Po '(?<=^Provider )[0-9]+' | \
      while read provider
      do
        log "Activating DisplayLink Display #${provider}"
        xrandr --setprovideroutputsource $provider 0
      done
  fi
fi


  # Try to activate all connected displays.
connectedDisplays=($(getConnectedDisplays))
for display in ${connectedDisplays[@]}
do
  log "Configuring ${display}"
  if [ -n "${previousDisplay}" ]
  then
    alignmentArgs="--right-of ${previousDisplay}"
  fi
  isDry || xrandr --output ${display} --mode ${x}x${y} ${alignmentArgs}
  previousDisplay=${display}
done

#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|

  # Disable display sleeping
  xset s noblank
  xset s off
  xset -dpms

  # Run unclutter to hide the mouse after idle.
  pkill -f -9 unclutter
  unclutter -idle 0.5 -root &

  # Start an x11vnc instance for debugging
  #isDry || pkill -f -9 x11vnc
  #isDry || x11vnc -bg -reopen -forever -display :0 >/dev/null 2>&1 &

connectedDisplaysActive=($(getConnectedDisplaysActive))
log "We have ${#connectedDisplaysActive[@]} active displays."
log "Starting."

  # Load global configuration
eval $(jq -r '.credentials | to_entries | .[] | .key + "=" + (.value | @sh)' config.json)
eval $(jq -r '.settings    | to_entries | .[] | .key + "=" + (.value | @sh)' config.json)
configuredDisplays=($(jq -rc '.displays | keys | join(" ")' config.json))
globalPassword="$(base64 -d <<< ${globalPasswordBase64})"

[ -z "$globalUsername" ]     && log "need username"             && exit 1
[ -z "$globalPassword" ]     && log "need globalPasswordBase64" && exit 1
[ -z "$configuredDisplays" ] && log "need displays"             && exit 1
[ -z "$tabbingInterval" ]    && log "need tabbingInterval"      && exit 1

  # Ensure no chromium processes are running
pkill -f -9 chromium

  # Emumerate displays
for configuredDisplay in ${configuredDisplays[@]}
do
  if [ -z "${connectedDisplaysActive[${configuredDisplay}]}" ]
  then
    log "There doesn't seem to be a display connected for configuredDisplay ${configuredDisplay}"
    continue
  fi

  log "Preparing: $configuredDisplay"

  # Start an instance of chromium on the appropriate display
  xOffset=$(((${x} * $(((${configuredDisplay}))))))
  URLs=($(jq -r ".displays.\"${configuredDisplay}\".urls| join(\" \")" config.json))
  username="$(jq -r ".displays.\"${configuredDisplay}\".username" config.json)"
  password="$(jq -r ".displays.\"${configuredDisplay}\".password" config.json)"
  [ -z "$username" ] && username="${globalUsername}"
  [ -z "$username" ] || [[ "$username" == null ]] && username="${globalUsername}"
  [ -z "$password" ] || [[ "$password" == null ]] && password="${globalPassword}"
  chromium --disk-cache-dir=${TMPDIR} --user-data-dir=/tmp/${configuredDisplay} --window-position=${xOffset},0 --kiosk --incognito "${URLs[0]}" >/dev/null 2>&1 &
  connectedDisplaysActiveChromiumPids+=($!)
  siteHandler ${URLs[0]}

  if [ ${#URLs[@]} -gt 1 ]
  then
    log "Opening the remainder of the URLs for this instance."
    chromium --disk-cache-dir=${TMPDIR} --user-data-dir=/tmp/${configuredDisplay} --kiosk --incognito ${URLs[@]:1} >/dev/null 2>&1 &
  else
    log "No additional URLs to open for this instance."
  fi

  log "Display ${configuredDisplay} done."
done


log "Chromium pid count: ${#connectedDisplaysActiveChromiumPids[@]}"

endGraphicalSessionOnDisplayCountChange & # Activate trigger

cycleTabsIndefinitely
