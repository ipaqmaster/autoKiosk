#!/usr/bin/env python
from screeninfo import get_monitors
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from time import sleep
import base64
import json
import os
import pyotp
import re
import threading

_scriptRoot = os.path.dirname(os.path.realpath(__file__))
_scriptName = _scriptRoot.split('/')[-1]
_namespace  = _scriptName
configFile  = "%s/config.json" % _scriptRoot

#  _____                 _   _
# |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
# | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
# |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#


def wait_page_load(driver, timeout=30):
    WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script("return document.readyState") == "complete"
    )

def is_login_page(driver):
    #keywords = ["login", "sign in", "log in", "sign-in", "logicmonitor hosted monitoring system"]
    keywords = ["login", "sign in", "log in", "sign-in", "two-factor authentication"]

    # Check title
    title = driver.title.lower()
    if any(keyword in title for keyword in keywords):
        return True

    # Check body text
    body = driver.find_element("tag name", "body").text.lower()
    if any(keyword in body for keyword in keywords):
        return True

    # Check form attributes (optional)
    forms = driver.find_elements("tag name", "form")
    for form in forms:
        html = form.get_attribute("outerHTML").lower()
        if any(keyword in html for keyword in keywords):
            return True

    return False


def input_field(driver, field, data, wait):
    field_input = wait.until(EC.presence_of_element_located(field))
    field_input.clear()
    field_input.send_keys(data)

def get_credentials(config, display_id, page_title):
    "Check auth_pages, then the display's own credentials and finally the global credentials for a username and password"

    username = password = None

    # Search the auth_pages configurable for a matching set of credentials for this particular page.
    for regex_title in config['auth_pages']:
        if re.search(regex_title, page_title):
            #print('MATCH')
            username = config['auth_pages'][regex_title]['username']
            password = base64.b64decode(config['auth_pages'][regex_title]['passwordBase64']).decode('utf-8')
            break

    if not username:
        if 'username' in config['displays'][display_id]:
            username = config['displays'][display_id]['username']

        else: # Check for a specific set of credentials in auth_pages or try the global definition


            if 'credentials' in config:
                if globalUsername in config['credentials']:
                    username = config['credentials']['username']
                else:
                    print('No usernames set anywhere. Giving up.')
                    return(False)

    if not password:
        if 'password' in config['displays'][display_id]:
            password = base64.b64decode(config['displays'][display_id]['password']).decode('utf-8')

        else:
            if 'credentials' in config:
                if 'globalPasswordBase64' in config['credentials']:
                    password = base64.b64decode(config['credentials']['globalPasswordBase64']).decode('utf-8')
                else:
                    print('No passwords set anywhere. Giving up.')
                    return(False)


    return username, password

def handle_login(driver, config, display_id):
    print('Logging in...')

    # Determine credentials
    username, password = get_credentials(config, display_id, driver.title)

    # Fill in some fields and submit
    try:
        wait_page_load(driver)
        wait = WebDriverWait(driver, 10)

        # Fill in the username and password fields
        input_field(driver, (By.NAME,"username"), username, wait)
        input_field(driver, (By.NAME,"password"), password, wait)

        # Click Submit
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        submit_button.click()

        # If we're still on a login page assume we're being challenged for a 2FA token. Should write a proper 2fa check.
        wait_page_load(driver)
        sleep(3) # wait_page_load isn't working too well for dynamic content
        if is_login_page(driver):
            if 'totp' in config['displays'][display_id]:
                totp_code = pyotp.TOTP(config['displays'][display_id]['totp']).now()
                input_field(driver, (By.CSS_SELECTOR, "input[placeholder*='Token']"), totp_code, wait)
                submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                submit_button.click()
                wait_page_load(driver)
            else:
                raise Exception("Still on login page after login attempt and no TOTP information stored!")

    except Exception as e:
        print("Something went wrong: %s" % e)



def handle_page(driver, config, display_id):
    #page_title = driver.title

    if is_login_page(driver):
        handle_login(driver, config, display_id)
        print('c')

def start_session(config, monitor, display_id, x=None, y=None):
    urls = config['displays'][display_id]['urls']

    chrome_options = Options()

    # Use kiosk mode
    chrome_options.add_argument("--kiosk")

    # Use guest mode to hide the password save pop-up
    chrome_options.add_argument("--guest")

    # Hide automation banner
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    # Place it on the correct display
    chrome_options.add_argument("--window-position=%s,%s" % (monitor.x, monitor.y))

    driver = webdriver.Chrome(options=chrome_options)

    primary_url    = urls[0]
    remaining_urls = urls[1:]

    # Open the primary url (First), handle any authentication.
    driver.get(primary_url)
    wait_page_load(driver)
    handle_page(driver, config, display_id)
    sleep(1) # Graceful sleep. Might not be enough on slower hosts

    # Open the rest of the urls as tabs
    for url in remaining_urls:
        driver.execute_script("window.open('%s');" % url)

    # Cycle through tabs until we die
    print('Thread %s cycling all tabs...' % display_id)
    while True:
        for handle in driver.window_handles:
            driver.switch_to.window(handle)
            if config['settings']['shouldRefresh']:
                driver.refresh()
                wait_page_load(driver)

            handle_page(driver, config, display_id)

            sleep(config['settings']['tabbingInterval'])


#  __  __       _
# |  \/  | __ _(_)_ __
# | |\/| |/ _` | | '_ \
# | |  | | (_| | | | | |
# |_|  |_|\__,_|_|_| |_|
#

def main():
    try:
       with open(configFile, 'r') as file:
           config = json.loads(file.read())
    except FileNotFoundError:
        print('Please copy %s.sample to %s to get started.' % (configFile, configFile))
        exit(1)

    # Track our threads
    threads = []

    # Get a monitor count
    monitors = get_monitors()

    # Iterate over monitors and those configured
    for displayIndex in range(0, len(monitors)):
        monitor = monitors[displayIndex]

        #start_session(config, monitor, display_id=displayIndex)

        thread = threading.Thread(target=start_session, args=(config, monitor, displayIndex))
        thread.start()
        threads.append(thread)

    # Wait for them to finish
    print('Waiting for threads to exit...')
    for thread in threads:
        thread.join()


if __name__ == "__main__":
    main()

